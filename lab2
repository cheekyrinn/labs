#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#define MAX_WORD_LENGTH 100


void displayMenu() {
    printf("\n---------------- Menu ----------------\n");
    printf("1. Write numbers to file\n");
    printf("2. Read numbers from file\n");
    printf("3. Clear file\n");
    printf("4. Count of a sequence of repeated words\n");
    printf("5. replace the words of the specified length with a space\n");
    printf("6. Exit\n");
    printf("--------------------------------------\n");
}

void writeNumbersToFile(const char* filename) {
    FILE* file;
    fopen_s(&file, filename, "r+");
    if (file == NULL) {
        perror("Error");
        return;
    }

    printf("Enter string (press Enter for end):\n");
    int c;
    fseek(file, 0, SEEK_END);
    fprintf(file, "\n");
    while ((c = getchar()) != '\n' && c != EOF) {
        fputc(c, file); // Записываем символ в файл
    }
    printf("String writen to file '%s'.\n", filename);
    fputc(32, file);
    fclose(file);
}

void ClearFile(const char* filename) {
    FILE* file;
    fopen_s(&file, filename, "w");
    if (file == NULL) {
        perror("Error");
        return;
    }
    fclose(file);
}

void readNumbersFromFile(const char* filename) {
    FILE* file;
    char c;
    fopen_s(&file, filename, "r");
    if (file == NULL) {
        printf("ERROR!\n");
        return;
    }
    printf("Data in the text file:\n");
    c = fgetc(file);
    while (c != EOF) {
        if (c == "\n") {
            printf("\n");
        }
        printf("%c", c);
        c = fgetc(file);
    }
    printf("\n");
    fclose(file);
}

void makespace(const char* filename, int value) {
    FILE* file;
    fopen_s(&file, filename, "r+");  // Открытие файла для чтения и записи
    if (file == NULL) {
        printf("ERROR!\n");
        return;
    }

    int ch;
    int length = 0;
    long word_start_position = -1;  // Позиция начала слова
    long current_position;  // Текущая позиция в файле

    while ((ch = fgetc(file)) != EOF) {
        current_position = ftell(file);  // Получаем текущую позицию в файле

        if (ch != 32) {
            if (ch != 10) {
                if (length == 0) {
                    word_start_position = current_position - 1;  // Запоминаем начало слова
                }
                length++;
            }
            
        }
        else {
            if (length == value) {
                // Если длина слова соответствует заданной, заменяем его на пробелы
                fseek(file, word_start_position, SEEK_SET);  // Возвращаемся в начало слова
                for (int i = 0; i < length; i++) {
                    fputc(0, file);  // Заменяем символы на пробелы
                }
                fseek(file, 0, SEEK_CUR);
            }
            length = 0;  // Сбрасываем счётчик длины слова
        }
    }

    // Если слово в конце файла не заканчивается пробелом
    if (length == value) {
        fseek(file, word_start_position, SEEK_SET);  // Возвращаемся в начало слова
        for (int i = 0; i < length; i++) {
            fputc(0, file);  // Заменяем символы на пробелы
        }
    }

    fclose(file);  // Закрываем файл
}



int input() {
    char s[20];
    int i = 0;
    int isNegative = 0;
    while (1) {
        char ch = _getch();

        if (ch == 13) break;

        if (ch == 8) {
            if (i > 0) {
                printf("\b \b");
                if (s[--i] == '-') {
                    isNegative = 0;
                }
            }
        }
        else if (ch == '-' && i == 0) {
            printf("%c", ch);
            s[i++] = ch;
            isNegative = 1;
        }
        else if (ch >= '0' && ch <= '9') {
            if (i < sizeof(s) - 1) {
                printf("%c", ch);
                s[i++] = ch;
            }
        }
    }
    return atoi(s);
}

int my_strlen(const char* str) {
    int length = 0;
    while (str[length] != '\0') {
        length++;
    }
    return length;
}

void my_strcpy(char* dest, const char* src) {
    int i = 0;
    while (src[i] != '\0') {
        dest[i] = src[i];
        i++;
    }
    dest[i] = '\0';  // Добавляем завершающий нулевой символ
}

int my_strcmp(const char* str1, const char* str2) {
    int i = 0;
    while (str1[i] != '\0' && str2[i] != '\0') {
        if (str1[i] != str2[i]) {
            return 0;  // Строки не равны
        }
        i++;
    }
    return (str1[i] == str2[i]);  // Строки равны, если оба символа на одинаковых позициях равны
}

void read_word(FILE* file, char* word) {
    int i = 0;
    int ch;

    // Пропускаем все пробелы и символы новой строки в начале
    while ((ch = fgetc(file)) != EOF && isspace(ch));

    // Если достигнут конец файла, возвращаем пустое слово
    if (ch == EOF) {
        word[0] = '\0';
        return;
    }

    // Читаем слово посимвольно
    do {
        word[i++] = ch;
        ch = fgetc(file);
    } while (ch != EOF && !isspace(ch) && i < MAX_WORD_LENGTH - 1);  // Пока не встретили пробел или конец строки

    word[i] = '\0';  // Завершаем строку
}

// Функция для нахождения длины самой длинной последовательности повторяющихся слов
int find_repeating_word_sequence_length(const char* filename) {
    FILE* file;
    fopen_s(&file, filename, "r");  // Открытие файла только для чтения
    if (file == NULL) {
        printf("Ошибка при открытии файла!\n");
        return -1;
    }

    char prev_word[MAX_WORD_LENGTH], curr_word[MAX_WORD_LENGTH];
    int current_sequence_count = 0;
    int max_sequence_count = 0;

    // Инициализация первого слова
    read_word(file, prev_word);

    while (prev_word[0] != '\0') {  // Пока не достигнут конец файла
        read_word(file, curr_word);

        // Если слова одинаковые, увеличиваем счётчик последовательности
        if (my_strcmp(prev_word, curr_word) == 1) {
            current_sequence_count++;
        }
        else {
            // Обновляем максимальную длину последовательности
            if (current_sequence_count > max_sequence_count) {
                max_sequence_count = current_sequence_count;
            }
            // Сброс счётчика и установка нового слова
            current_sequence_count = 1;
        }

        // Копируем текущее слово в предыдущее
        my_strcpy(prev_word, curr_word);
    }

    // Проверка после завершения цикла (для последней последовательности)
    if (current_sequence_count > max_sequence_count) {
        max_sequence_count = current_sequence_count;
    }

    fclose(file);
    return max_sequence_count;
}


int main() {

    //char* filename = argv[1];
    const char* filename = "filename.txt";
    int choice, value, max_len;

    while (1) {
        displayMenu();
        printf("Enter your choice: ");
        choice = input();

        switch (choice) {
        case 1:
            writeNumbersToFile(filename);
            break;
        case 2:
            readNumbersFromFile(filename);
            break;
        case 3:
            printf("File cleared\n");
            ClearFile(filename);
            break;
        case 4:
            max_len = find_repeating_word_sequence_length(filename);
            if (max_len >= 0) {
                printf("length: %d\n", max_len);
            }
            else {
                printf("Error.\n");
            }
            break;
        case 5:
            printf("Enter length:\n");
            value = input();
            makespace(filename, value);
            readNumbersFromFile(filename);
            break;

        case 6:
            printf("Exiting the program.\n");
            return 0;

        default:
            printf("\nInvalid choice. Please try again.\n");
        }
        choice = 0;
        while (getchar() != '\n');
    }

    return 0;
}
